/**********************************************************************
 * This code was generated by a tool.                                 *
 * Please do not modify this file directly - modify Tokens.tt instead *
 **********************************************************************/
using System;
using System.Diagnostics;

namespace ClrDebug
{
    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [{Type}]")]
    public struct mdToken : IComparable, IEquatable<mdToken>
    {
        public static readonly mdToken Nil = new mdToken();
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdToken(uint value)
        {
            Value = value;
        }

        public mdToken(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdToken value) => (int) value.Value;

        public static implicit operator uint(mdToken value) => value.Value;

        public static implicit operator mdToken(int value) => new mdToken(value);

        public static implicit operator mdToken(uint value) => new mdToken(value);

        public static explicit operator mdModule(mdToken value)
        {
            if (value.Type != CorTokenType.mdtModule)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdModule'.");

            return new mdModule(value.Value);
        }

        public static explicit operator mdTypeRef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtTypeRef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdTypeRef'.");

            return new mdTypeRef(value.Value);
        }

        public static explicit operator mdTypeDef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtTypeDef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdTypeDef'.");

            return new mdTypeDef(value.Value);
        }

        public static explicit operator mdFieldDef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtFieldDef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdFieldDef'.");

            return new mdFieldDef(value.Value);
        }

        public static explicit operator mdMethodDef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtMethodDef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdMethodDef'.");

            return new mdMethodDef(value.Value);
        }

        public static explicit operator mdParamDef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtParamDef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdParamDef'.");

            return new mdParamDef(value.Value);
        }

        public static explicit operator mdInterfaceImpl(mdToken value)
        {
            if (value.Type != CorTokenType.mdtInterfaceImpl)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdInterfaceImpl'.");

            return new mdInterfaceImpl(value.Value);
        }

        public static explicit operator mdMemberRef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtMemberRef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdMemberRef'.");

            return new mdMemberRef(value.Value);
        }

        public static explicit operator mdCustomAttribute(mdToken value)
        {
            if (value.Type != CorTokenType.mdtCustomAttribute)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdCustomAttribute'.");

            return new mdCustomAttribute(value.Value);
        }

        public static explicit operator mdPermission(mdToken value)
        {
            if (value.Type != CorTokenType.mdtPermission)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdPermission'.");

            return new mdPermission(value.Value);
        }

        public static explicit operator mdSignature(mdToken value)
        {
            if (value.Type != CorTokenType.mdtSignature)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdSignature'.");

            return new mdSignature(value.Value);
        }

        public static explicit operator mdEvent(mdToken value)
        {
            if (value.Type != CorTokenType.mdtEvent)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdEvent'.");

            return new mdEvent(value.Value);
        }

        public static explicit operator mdProperty(mdToken value)
        {
            if (value.Type != CorTokenType.mdtProperty)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdProperty'.");

            return new mdProperty(value.Value);
        }

        public static explicit operator mdModuleRef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtModuleRef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdModuleRef'.");

            return new mdModuleRef(value.Value);
        }

        public static explicit operator mdAssembly(mdToken value)
        {
            if (value.Type != CorTokenType.mdtAssembly)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdAssembly'.");

            return new mdAssembly(value.Value);
        }

        public static explicit operator mdAssemblyRef(mdToken value)
        {
            if (value.Type != CorTokenType.mdtAssemblyRef)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdAssemblyRef'.");

            return new mdAssemblyRef(value.Value);
        }

        public static explicit operator mdFile(mdToken value)
        {
            if (value.Type != CorTokenType.mdtFile)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdFile'.");

            return new mdFile(value.Value);
        }

        public static explicit operator mdExportedType(mdToken value)
        {
            if (value.Type != CorTokenType.mdtExportedType)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdExportedType'.");

            return new mdExportedType(value.Value);
        }

        public static explicit operator mdManifestResource(mdToken value)
        {
            if (value.Type != CorTokenType.mdtManifestResource)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdManifestResource'.");

            return new mdManifestResource(value.Value);
        }

        public static explicit operator mdTypeSpec(mdToken value)
        {
            if (value.Type != CorTokenType.mdtTypeSpec)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdTypeSpec'.");

            return new mdTypeSpec(value.Value);
        }

        public static explicit operator mdGenericParam(mdToken value)
        {
            if (value.Type != CorTokenType.mdtGenericParam)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdGenericParam'.");

            return new mdGenericParam(value.Value);
        }

        public static explicit operator mdMethodSpec(mdToken value)
        {
            if (value.Type != CorTokenType.mdtMethodSpec)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdMethodSpec'.");

            return new mdMethodSpec(value.Value);
        }

        public static explicit operator mdGenericParamConstraint(mdToken value)
        {
            if (value.Type != CorTokenType.mdtGenericParamConstraint)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdGenericParamConstraint'.");

            return new mdGenericParamConstraint(value.Value);
        }

        public static explicit operator mdString(mdToken value)
        {
            if (value.Type != CorTokenType.mdtString)
                throw new InvalidOperationException($"Cannot cast a value of type '{value.Type}' to a token of type 'mdString'.");

            return new mdString(value.Value);
        }

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdToken v ? v.Value : value);

        public bool Equals(mdToken other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdToken left, mdToken right) => left.Value == right.Value;

        public static bool operator !=(mdToken left, mdToken right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdModule]")]
    public struct mdModule : IComparable, IEquatable<mdModule>
    {
        public static readonly mdModule Nil = new mdModule((uint) CorTokenType.mdtModule);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdModule(uint value)
        {
            Value = value;
        }

        public mdModule(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdModule value) => (int) value.Value;

        public static implicit operator uint(mdModule value) => value.Value;

        public static implicit operator mdModule(int value) => new mdModule(value);

        public static implicit operator mdModule(uint value) => new mdModule(value);

        public static implicit operator mdToken(mdModule value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdModule v ? v.Value : value);

        public bool Equals(mdModule other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdModule left, mdModule right) => left.Value == right.Value;

        public static bool operator !=(mdModule left, mdModule right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdTypeRef]")]
    public struct mdTypeRef : IComparable, IEquatable<mdTypeRef>
    {
        public static readonly mdTypeRef Nil = new mdTypeRef((uint) CorTokenType.mdtTypeRef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdTypeRef(uint value)
        {
            Value = value;
        }

        public mdTypeRef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdTypeRef value) => (int) value.Value;

        public static implicit operator uint(mdTypeRef value) => value.Value;

        public static implicit operator mdTypeRef(int value) => new mdTypeRef(value);

        public static implicit operator mdTypeRef(uint value) => new mdTypeRef(value);

        public static implicit operator mdToken(mdTypeRef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdTypeRef v ? v.Value : value);

        public bool Equals(mdTypeRef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdTypeRef left, mdTypeRef right) => left.Value == right.Value;

        public static bool operator !=(mdTypeRef left, mdTypeRef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdTypeDef]")]
    public struct mdTypeDef : IComparable, IEquatable<mdTypeDef>
    {
        public static readonly mdTypeDef Nil = new mdTypeDef((uint) CorTokenType.mdtTypeDef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdTypeDef(uint value)
        {
            Value = value;
        }

        public mdTypeDef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdTypeDef value) => (int) value.Value;

        public static implicit operator uint(mdTypeDef value) => value.Value;

        public static implicit operator mdTypeDef(int value) => new mdTypeDef(value);

        public static implicit operator mdTypeDef(uint value) => new mdTypeDef(value);

        public static implicit operator mdToken(mdTypeDef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdTypeDef v ? v.Value : value);

        public bool Equals(mdTypeDef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdTypeDef left, mdTypeDef right) => left.Value == right.Value;

        public static bool operator !=(mdTypeDef left, mdTypeDef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdFieldDef]")]
    public struct mdFieldDef : IComparable, IEquatable<mdFieldDef>
    {
        public static readonly mdFieldDef Nil = new mdFieldDef((uint) CorTokenType.mdtFieldDef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdFieldDef(uint value)
        {
            Value = value;
        }

        public mdFieldDef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdFieldDef value) => (int) value.Value;

        public static implicit operator uint(mdFieldDef value) => value.Value;

        public static implicit operator mdFieldDef(int value) => new mdFieldDef(value);

        public static implicit operator mdFieldDef(uint value) => new mdFieldDef(value);

        public static implicit operator mdToken(mdFieldDef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdFieldDef v ? v.Value : value);

        public bool Equals(mdFieldDef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdFieldDef left, mdFieldDef right) => left.Value == right.Value;

        public static bool operator !=(mdFieldDef left, mdFieldDef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdMethodDef]")]
    public struct mdMethodDef : IComparable, IEquatable<mdMethodDef>
    {
        public static readonly mdMethodDef Nil = new mdMethodDef((uint) CorTokenType.mdtMethodDef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdMethodDef(uint value)
        {
            Value = value;
        }

        public mdMethodDef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdMethodDef value) => (int) value.Value;

        public static implicit operator uint(mdMethodDef value) => value.Value;

        public static implicit operator mdMethodDef(int value) => new mdMethodDef(value);

        public static implicit operator mdMethodDef(uint value) => new mdMethodDef(value);

        public static implicit operator mdToken(mdMethodDef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdMethodDef v ? v.Value : value);

        public bool Equals(mdMethodDef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdMethodDef left, mdMethodDef right) => left.Value == right.Value;

        public static bool operator !=(mdMethodDef left, mdMethodDef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdParamDef]")]
    public struct mdParamDef : IComparable, IEquatable<mdParamDef>
    {
        public static readonly mdParamDef Nil = new mdParamDef((uint) CorTokenType.mdtParamDef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdParamDef(uint value)
        {
            Value = value;
        }

        public mdParamDef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdParamDef value) => (int) value.Value;

        public static implicit operator uint(mdParamDef value) => value.Value;

        public static implicit operator mdParamDef(int value) => new mdParamDef(value);

        public static implicit operator mdParamDef(uint value) => new mdParamDef(value);

        public static implicit operator mdToken(mdParamDef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdParamDef v ? v.Value : value);

        public bool Equals(mdParamDef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdParamDef left, mdParamDef right) => left.Value == right.Value;

        public static bool operator !=(mdParamDef left, mdParamDef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdInterfaceImpl]")]
    public struct mdInterfaceImpl : IComparable, IEquatable<mdInterfaceImpl>
    {
        public static readonly mdInterfaceImpl Nil = new mdInterfaceImpl((uint) CorTokenType.mdtInterfaceImpl);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdInterfaceImpl(uint value)
        {
            Value = value;
        }

        public mdInterfaceImpl(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdInterfaceImpl value) => (int) value.Value;

        public static implicit operator uint(mdInterfaceImpl value) => value.Value;

        public static implicit operator mdInterfaceImpl(int value) => new mdInterfaceImpl(value);

        public static implicit operator mdInterfaceImpl(uint value) => new mdInterfaceImpl(value);

        public static implicit operator mdToken(mdInterfaceImpl value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdInterfaceImpl v ? v.Value : value);

        public bool Equals(mdInterfaceImpl other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdInterfaceImpl left, mdInterfaceImpl right) => left.Value == right.Value;

        public static bool operator !=(mdInterfaceImpl left, mdInterfaceImpl right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdMemberRef]")]
    public struct mdMemberRef : IComparable, IEquatable<mdMemberRef>
    {
        public static readonly mdMemberRef Nil = new mdMemberRef((uint) CorTokenType.mdtMemberRef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdMemberRef(uint value)
        {
            Value = value;
        }

        public mdMemberRef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdMemberRef value) => (int) value.Value;

        public static implicit operator uint(mdMemberRef value) => value.Value;

        public static implicit operator mdMemberRef(int value) => new mdMemberRef(value);

        public static implicit operator mdMemberRef(uint value) => new mdMemberRef(value);

        public static implicit operator mdToken(mdMemberRef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdMemberRef v ? v.Value : value);

        public bool Equals(mdMemberRef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdMemberRef left, mdMemberRef right) => left.Value == right.Value;

        public static bool operator !=(mdMemberRef left, mdMemberRef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdCustomAttribute]")]
    public struct mdCustomAttribute : IComparable, IEquatable<mdCustomAttribute>
    {
        public static readonly mdCustomAttribute Nil = new mdCustomAttribute((uint) CorTokenType.mdtCustomAttribute);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdCustomAttribute(uint value)
        {
            Value = value;
        }

        public mdCustomAttribute(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdCustomAttribute value) => (int) value.Value;

        public static implicit operator uint(mdCustomAttribute value) => value.Value;

        public static implicit operator mdCustomAttribute(int value) => new mdCustomAttribute(value);

        public static implicit operator mdCustomAttribute(uint value) => new mdCustomAttribute(value);

        public static implicit operator mdToken(mdCustomAttribute value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdCustomAttribute v ? v.Value : value);

        public bool Equals(mdCustomAttribute other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdCustomAttribute left, mdCustomAttribute right) => left.Value == right.Value;

        public static bool operator !=(mdCustomAttribute left, mdCustomAttribute right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdPermission]")]
    public struct mdPermission : IComparable, IEquatable<mdPermission>
    {
        public static readonly mdPermission Nil = new mdPermission((uint) CorTokenType.mdtPermission);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdPermission(uint value)
        {
            Value = value;
        }

        public mdPermission(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdPermission value) => (int) value.Value;

        public static implicit operator uint(mdPermission value) => value.Value;

        public static implicit operator mdPermission(int value) => new mdPermission(value);

        public static implicit operator mdPermission(uint value) => new mdPermission(value);

        public static implicit operator mdToken(mdPermission value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdPermission v ? v.Value : value);

        public bool Equals(mdPermission other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdPermission left, mdPermission right) => left.Value == right.Value;

        public static bool operator !=(mdPermission left, mdPermission right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdSignature]")]
    public struct mdSignature : IComparable, IEquatable<mdSignature>
    {
        public static readonly mdSignature Nil = new mdSignature((uint) CorTokenType.mdtSignature);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdSignature(uint value)
        {
            Value = value;
        }

        public mdSignature(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdSignature value) => (int) value.Value;

        public static implicit operator uint(mdSignature value) => value.Value;

        public static implicit operator mdSignature(int value) => new mdSignature(value);

        public static implicit operator mdSignature(uint value) => new mdSignature(value);

        public static implicit operator mdToken(mdSignature value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdSignature v ? v.Value : value);

        public bool Equals(mdSignature other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdSignature left, mdSignature right) => left.Value == right.Value;

        public static bool operator !=(mdSignature left, mdSignature right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdEvent]")]
    public struct mdEvent : IComparable, IEquatable<mdEvent>
    {
        public static readonly mdEvent Nil = new mdEvent((uint) CorTokenType.mdtEvent);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdEvent(uint value)
        {
            Value = value;
        }

        public mdEvent(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdEvent value) => (int) value.Value;

        public static implicit operator uint(mdEvent value) => value.Value;

        public static implicit operator mdEvent(int value) => new mdEvent(value);

        public static implicit operator mdEvent(uint value) => new mdEvent(value);

        public static implicit operator mdToken(mdEvent value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdEvent v ? v.Value : value);

        public bool Equals(mdEvent other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdEvent left, mdEvent right) => left.Value == right.Value;

        public static bool operator !=(mdEvent left, mdEvent right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdProperty]")]
    public struct mdProperty : IComparable, IEquatable<mdProperty>
    {
        public static readonly mdProperty Nil = new mdProperty((uint) CorTokenType.mdtProperty);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdProperty(uint value)
        {
            Value = value;
        }

        public mdProperty(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdProperty value) => (int) value.Value;

        public static implicit operator uint(mdProperty value) => value.Value;

        public static implicit operator mdProperty(int value) => new mdProperty(value);

        public static implicit operator mdProperty(uint value) => new mdProperty(value);

        public static implicit operator mdToken(mdProperty value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdProperty v ? v.Value : value);

        public bool Equals(mdProperty other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdProperty left, mdProperty right) => left.Value == right.Value;

        public static bool operator !=(mdProperty left, mdProperty right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdModuleRef]")]
    public struct mdModuleRef : IComparable, IEquatable<mdModuleRef>
    {
        public static readonly mdModuleRef Nil = new mdModuleRef((uint) CorTokenType.mdtModuleRef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdModuleRef(uint value)
        {
            Value = value;
        }

        public mdModuleRef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdModuleRef value) => (int) value.Value;

        public static implicit operator uint(mdModuleRef value) => value.Value;

        public static implicit operator mdModuleRef(int value) => new mdModuleRef(value);

        public static implicit operator mdModuleRef(uint value) => new mdModuleRef(value);

        public static implicit operator mdToken(mdModuleRef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdModuleRef v ? v.Value : value);

        public bool Equals(mdModuleRef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdModuleRef left, mdModuleRef right) => left.Value == right.Value;

        public static bool operator !=(mdModuleRef left, mdModuleRef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdAssembly]")]
    public struct mdAssembly : IComparable, IEquatable<mdAssembly>
    {
        public static readonly mdAssembly Nil = new mdAssembly((uint) CorTokenType.mdtAssembly);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdAssembly(uint value)
        {
            Value = value;
        }

        public mdAssembly(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdAssembly value) => (int) value.Value;

        public static implicit operator uint(mdAssembly value) => value.Value;

        public static implicit operator mdAssembly(int value) => new mdAssembly(value);

        public static implicit operator mdAssembly(uint value) => new mdAssembly(value);

        public static implicit operator mdToken(mdAssembly value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdAssembly v ? v.Value : value);

        public bool Equals(mdAssembly other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdAssembly left, mdAssembly right) => left.Value == right.Value;

        public static bool operator !=(mdAssembly left, mdAssembly right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdAssemblyRef]")]
    public struct mdAssemblyRef : IComparable, IEquatable<mdAssemblyRef>
    {
        public static readonly mdAssemblyRef Nil = new mdAssemblyRef((uint) CorTokenType.mdtAssemblyRef);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdAssemblyRef(uint value)
        {
            Value = value;
        }

        public mdAssemblyRef(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdAssemblyRef value) => (int) value.Value;

        public static implicit operator uint(mdAssemblyRef value) => value.Value;

        public static implicit operator mdAssemblyRef(int value) => new mdAssemblyRef(value);

        public static implicit operator mdAssemblyRef(uint value) => new mdAssemblyRef(value);

        public static implicit operator mdToken(mdAssemblyRef value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdAssemblyRef v ? v.Value : value);

        public bool Equals(mdAssemblyRef other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdAssemblyRef left, mdAssemblyRef right) => left.Value == right.Value;

        public static bool operator !=(mdAssemblyRef left, mdAssemblyRef right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdFile]")]
    public struct mdFile : IComparable, IEquatable<mdFile>
    {
        public static readonly mdFile Nil = new mdFile((uint) CorTokenType.mdtFile);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdFile(uint value)
        {
            Value = value;
        }

        public mdFile(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdFile value) => (int) value.Value;

        public static implicit operator uint(mdFile value) => value.Value;

        public static implicit operator mdFile(int value) => new mdFile(value);

        public static implicit operator mdFile(uint value) => new mdFile(value);

        public static implicit operator mdToken(mdFile value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdFile v ? v.Value : value);

        public bool Equals(mdFile other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdFile left, mdFile right) => left.Value == right.Value;

        public static bool operator !=(mdFile left, mdFile right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdExportedType]")]
    public struct mdExportedType : IComparable, IEquatable<mdExportedType>
    {
        public static readonly mdExportedType Nil = new mdExportedType((uint) CorTokenType.mdtExportedType);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdExportedType(uint value)
        {
            Value = value;
        }

        public mdExportedType(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdExportedType value) => (int) value.Value;

        public static implicit operator uint(mdExportedType value) => value.Value;

        public static implicit operator mdExportedType(int value) => new mdExportedType(value);

        public static implicit operator mdExportedType(uint value) => new mdExportedType(value);

        public static implicit operator mdToken(mdExportedType value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdExportedType v ? v.Value : value);

        public bool Equals(mdExportedType other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdExportedType left, mdExportedType right) => left.Value == right.Value;

        public static bool operator !=(mdExportedType left, mdExportedType right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdManifestResource]")]
    public struct mdManifestResource : IComparable, IEquatable<mdManifestResource>
    {
        public static readonly mdManifestResource Nil = new mdManifestResource((uint) CorTokenType.mdtManifestResource);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdManifestResource(uint value)
        {
            Value = value;
        }

        public mdManifestResource(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdManifestResource value) => (int) value.Value;

        public static implicit operator uint(mdManifestResource value) => value.Value;

        public static implicit operator mdManifestResource(int value) => new mdManifestResource(value);

        public static implicit operator mdManifestResource(uint value) => new mdManifestResource(value);

        public static implicit operator mdToken(mdManifestResource value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdManifestResource v ? v.Value : value);

        public bool Equals(mdManifestResource other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdManifestResource left, mdManifestResource right) => left.Value == right.Value;

        public static bool operator !=(mdManifestResource left, mdManifestResource right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdTypeSpec]")]
    public struct mdTypeSpec : IComparable, IEquatable<mdTypeSpec>
    {
        public static readonly mdTypeSpec Nil = new mdTypeSpec((uint) CorTokenType.mdtTypeSpec);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdTypeSpec(uint value)
        {
            Value = value;
        }

        public mdTypeSpec(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdTypeSpec value) => (int) value.Value;

        public static implicit operator uint(mdTypeSpec value) => value.Value;

        public static implicit operator mdTypeSpec(int value) => new mdTypeSpec(value);

        public static implicit operator mdTypeSpec(uint value) => new mdTypeSpec(value);

        public static implicit operator mdToken(mdTypeSpec value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdTypeSpec v ? v.Value : value);

        public bool Equals(mdTypeSpec other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdTypeSpec left, mdTypeSpec right) => left.Value == right.Value;

        public static bool operator !=(mdTypeSpec left, mdTypeSpec right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdGenericParam]")]
    public struct mdGenericParam : IComparable, IEquatable<mdGenericParam>
    {
        public static readonly mdGenericParam Nil = new mdGenericParam((uint) CorTokenType.mdtGenericParam);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdGenericParam(uint value)
        {
            Value = value;
        }

        public mdGenericParam(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdGenericParam value) => (int) value.Value;

        public static implicit operator uint(mdGenericParam value) => value.Value;

        public static implicit operator mdGenericParam(int value) => new mdGenericParam(value);

        public static implicit operator mdGenericParam(uint value) => new mdGenericParam(value);

        public static implicit operator mdToken(mdGenericParam value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdGenericParam v ? v.Value : value);

        public bool Equals(mdGenericParam other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdGenericParam left, mdGenericParam right) => left.Value == right.Value;

        public static bool operator !=(mdGenericParam left, mdGenericParam right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdMethodSpec]")]
    public struct mdMethodSpec : IComparable, IEquatable<mdMethodSpec>
    {
        public static readonly mdMethodSpec Nil = new mdMethodSpec((uint) CorTokenType.mdtMethodSpec);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdMethodSpec(uint value)
        {
            Value = value;
        }

        public mdMethodSpec(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdMethodSpec value) => (int) value.Value;

        public static implicit operator uint(mdMethodSpec value) => value.Value;

        public static implicit operator mdMethodSpec(int value) => new mdMethodSpec(value);

        public static implicit operator mdMethodSpec(uint value) => new mdMethodSpec(value);

        public static implicit operator mdToken(mdMethodSpec value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdMethodSpec v ? v.Value : value);

        public bool Equals(mdMethodSpec other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdMethodSpec left, mdMethodSpec right) => left.Value == right.Value;

        public static bool operator !=(mdMethodSpec left, mdMethodSpec right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdGenericParamConstraint]")]
    public struct mdGenericParamConstraint : IComparable, IEquatable<mdGenericParamConstraint>
    {
        public static readonly mdGenericParamConstraint Nil = new mdGenericParamConstraint((uint) CorTokenType.mdtGenericParamConstraint);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdGenericParamConstraint(uint value)
        {
            Value = value;
        }

        public mdGenericParamConstraint(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdGenericParamConstraint value) => (int) value.Value;

        public static implicit operator uint(mdGenericParamConstraint value) => value.Value;

        public static implicit operator mdGenericParamConstraint(int value) => new mdGenericParamConstraint(value);

        public static implicit operator mdGenericParamConstraint(uint value) => new mdGenericParamConstraint(value);

        public static implicit operator mdToken(mdGenericParamConstraint value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdGenericParamConstraint v ? v.Value : value);

        public bool Equals(mdGenericParamConstraint other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdGenericParamConstraint left, mdGenericParamConstraint right) => left.Value == right.Value;

        public static bool operator !=(mdGenericParamConstraint left, mdGenericParamConstraint right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdString]")]
    public struct mdString : IComparable, IEquatable<mdString>
    {
        public static readonly mdString Nil = new mdString((uint) CorTokenType.mdtString);
        
        /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdString(uint value)
        {
            Value = value;
        }

        public mdString(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdString value) => (int) value.Value;

        public static implicit operator uint(mdString value) => value.Value;

        public static implicit operator mdString(int value) => new mdString(value);

        public static implicit operator mdString(uint value) => new mdString(value);

        public static implicit operator mdToken(mdString value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdString v ? v.Value : value);

        public bool Equals(mdString other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdString left, mdString right) => left.Value == right.Value;

        public static bool operator !=(mdString left, mdString right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }

    [Serializable]
    [DebuggerDisplay("{ToString(),nq} [mdCPToken]")]
    public struct mdCPToken : IComparable, IEquatable<mdCPToken>
    {
                /// <summary>
        /// Gets the Row ID of the metadata token.
        /// </summary>
        public int Rid => (int) Value & 0x00FFFFFF;

        public CorTokenType Type => (CorTokenType) (Value & 0xFF000000);

        /// <summary>
        /// Gets the raw numeric value of the metadata token.
        /// </summary>
        public uint Value { get; }

        public bool IsNil => Rid == 0;

        public mdCPToken(uint value)
        {
            Value = value;
        }

        public mdCPToken(int value) : this((uint) value)
        {
        }

        public static implicit operator int(mdCPToken value) => (int) value.Value;

        public static implicit operator uint(mdCPToken value) => value.Value;

        public static implicit operator mdCPToken(int value) => new mdCPToken(value);

        public static implicit operator mdCPToken(uint value) => new mdCPToken(value);

        public static implicit operator mdToken(mdCPToken value) => new mdToken(value.Value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo(Value, value is mdCPToken v ? v.Value : value);

        public bool Equals(mdCPToken other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(mdCPToken left, mdCPToken right) => left.Value == right.Value;

        public static bool operator !=(mdCPToken left, mdCPToken right) => left.Value != right.Value;

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => "0x" + Value.ToString("X");
    }
}