/************************************************************************
 * This code was generated by a tool.                                   *
 * Please do not modify this file directly - modify Types.tt instead    *
 ***********************************************************************/
using System;
using System.Diagnostics;

namespace ClrDebug.PDB
{
    /// <summary>
    /// Represents a 16-bit type index. This type is also known as "TI16" within PDB1.
    /// </summary>
    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_typ16_t : IComparable, IEquatable<CV_typ16_t>
    {
        public short Value { get; }

        public CV_typ16_t(short value)
        {
            Value = value;
        }

        public static implicit operator short(CV_typ16_t value) => value.Value;

        public static implicit operator CV_typ16_t(short value) => new CV_typ16_t(value);

        public static implicit operator CV_typ16_t(int value) => new CV_typ16_t((short) value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_typ16_t v ? v.Value : value);

        public bool Equals(CV_typ16_t other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_typ16_t left, CV_typ16_t right) => left.Value == right.Value;

        public static bool operator ==(CV_typ16_t left, int right) => left.Value == (short) right;

        public static bool operator !=(CV_typ16_t left, CV_typ16_t right) => left.Value != right.Value;

        public static bool operator !=(CV_typ16_t left, int right) => left.Value != (short) right;

        public override int GetHashCode() => Value.GetHashCode();
    }

    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_off16_t : IComparable, IEquatable<CV_off16_t>
    {
        public short Value { get; }

        public CV_off16_t(short value)
        {
            Value = value;
        }

        public static implicit operator short(CV_off16_t value) => value.Value;

        public static implicit operator CV_off16_t(short value) => new CV_off16_t(value);

        public static implicit operator CV_off16_t(int value) => new CV_off16_t((short) value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_off16_t v ? v.Value : value);

        public bool Equals(CV_off16_t other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_off16_t left, CV_off16_t right) => left.Value == right.Value;

        public static bool operator ==(CV_off16_t left, int right) => left.Value == (short) right;

        public static bool operator !=(CV_off16_t left, CV_off16_t right) => left.Value != right.Value;

        public static bool operator !=(CV_off16_t left, int right) => left.Value != (short) right;

        public override int GetHashCode() => Value.GetHashCode();
    }

    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_uoff16_t : IComparable, IEquatable<CV_uoff16_t>
    {
        public short Value { get; }

        public CV_uoff16_t(short value)
        {
            Value = value;
        }

        public static implicit operator short(CV_uoff16_t value) => value.Value;

        public static implicit operator CV_uoff16_t(short value) => new CV_uoff16_t(value);

        public static implicit operator CV_uoff16_t(int value) => new CV_uoff16_t((short) value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_uoff16_t v ? v.Value : value);

        public bool Equals(CV_uoff16_t other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_uoff16_t left, CV_uoff16_t right) => left.Value == right.Value;

        public static bool operator ==(CV_uoff16_t left, int right) => left.Value == (short) right;

        public static bool operator !=(CV_uoff16_t left, CV_uoff16_t right) => left.Value != right.Value;

        public static bool operator !=(CV_uoff16_t left, int right) => left.Value != (short) right;

        public override int GetHashCode() => Value.GetHashCode();
    }

    /// <summary>
    /// Represents a 32-bit type index. This type is also known as "TI" within PDB1.
    /// </summary>
    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_typ_t : IComparable, IEquatable<CV_typ_t>
    {
        public int Value { get; }

        public CV_typ_t(int value)
        {
            Value = value;
        }

        public static implicit operator int(CV_typ_t value) => value.Value;

        public static implicit operator CV_typ_t(int value) => new CV_typ_t(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_typ_t v ? v.Value : value);

        public bool Equals(CV_typ_t other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_typ_t left, CV_typ_t right) => left.Value == right.Value;

        public static bool operator ==(CV_typ_t left, int right) => left.Value == (int) right;

        public static bool operator !=(CV_typ_t left, CV_typ_t right) => left.Value != right.Value;

        public static bool operator !=(CV_typ_t left, int right) => left.Value != (int) right;

        public override int GetHashCode() => Value.GetHashCode();
    }

    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_off32_t : IComparable, IEquatable<CV_off32_t>
    {
        public int Value { get; }

        public CV_off32_t(int value)
        {
            Value = value;
        }

        public static implicit operator int(CV_off32_t value) => value.Value;

        public static implicit operator CV_off32_t(int value) => new CV_off32_t(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_off32_t v ? v.Value : value);

        public bool Equals(CV_off32_t other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_off32_t left, CV_off32_t right) => left.Value == right.Value;

        public static bool operator ==(CV_off32_t left, int right) => left.Value == (int) right;

        public static bool operator !=(CV_off32_t left, CV_off32_t right) => left.Value != right.Value;

        public static bool operator !=(CV_off32_t left, int right) => left.Value != (int) right;

        public override int GetHashCode() => Value.GetHashCode();
    }

    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_uoff32_t : IComparable, IEquatable<CV_uoff32_t>
    {
        public int Value { get; }

        public CV_uoff32_t(int value)
        {
            Value = value;
        }

        public static implicit operator int(CV_uoff32_t value) => value.Value;

        public static implicit operator CV_uoff32_t(int value) => new CV_uoff32_t(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_uoff32_t v ? v.Value : value);

        public bool Equals(CV_uoff32_t other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_uoff32_t left, CV_uoff32_t right) => left.Value == right.Value;

        public static bool operator ==(CV_uoff32_t left, int right) => left.Value == (int) right;

        public static bool operator !=(CV_uoff32_t left, CV_uoff32_t right) => left.Value != right.Value;

        public static bool operator !=(CV_uoff32_t left, int right) => left.Value != (int) right;

        public override int GetHashCode() => Value.GetHashCode();
    }

    [Serializable]
    [DebuggerDisplay("{Value}")]
    public struct CV_ItemId : IComparable, IEquatable<CV_ItemId>
    {
        public int Value { get; }

        public CV_ItemId(int value)
        {
            Value = value;
        }

        public static implicit operator int(CV_ItemId value) => value.Value;

        public static implicit operator CV_ItemId(int value) => new CV_ItemId(value);

        public int CompareTo(object value) => UnsignedValueHelpers.CompareTo((ulong) Value, value is CV_ItemId v ? v.Value : value);

        public bool Equals(CV_ItemId other) => other.Value.Equals(Value);

        public override bool Equals(object obj) => UnsignedValueHelpers.Equals(this, obj);

        public static bool operator ==(CV_ItemId left, CV_ItemId right) => left.Value == right.Value;

        public static bool operator ==(CV_ItemId left, int right) => left.Value == (int) right;

        public static bool operator !=(CV_ItemId left, CV_ItemId right) => left.Value != right.Value;

        public static bool operator !=(CV_ItemId left, int right) => left.Value != (int) right;

        public override int GetHashCode() => Value.GetHashCode();
    }
}